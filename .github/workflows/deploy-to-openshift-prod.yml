name: 4 PROD - Deploy Dynamics-API

env:
  # EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  # EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: ${{ secrets.CCOF_NAMESPACE_NO_ENV }}-prod

  # SPLUNK_TOKEN: ${{ secrets.SPLUNK_TOKEN }}

  # EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}

  DOCKER_ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca/docker-remote
  ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca

  APP_NAME: 'ccof'
  REPO_NAME: "educ-ccof-d365"
  BRANCH:  ${{ github.ref_name }}
  IMAGE_NAME: "d365api"
  APP_ENVIRONMENT: "prod"

  NAMESPACE: ${{ secrets.CCOF_NAMESPACE_NO_ENV }}

  MIN_REPLICAS: "3"
  MAX_REPLICAS: "5"
  MIN_CPU: "50m"
  MAX_CPU: "100m"
  MIN_MEM: "200Mi"
  MAX_MEM: "250Mi"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'The image tag to deploy'
        required: true
        type: string
jobs:
  openshift-ci-cd:
    name: Deploy D365 API to PROD
    runs-on: ubuntu-24.04
    environment: prod

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Print Workflow Dispatch Inputs and Env Vars
      uses: shayki5/print-workflow-dispatch-inputs@v1
      with:
        add_to_summary: 'true'
        print_env_vars: 'false'

    - name: Check for required secrets
      uses: actions/github-script@v4
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v2
      with:
        ref: ${{ env.BRANCH }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4.16

    - name: Deploy
      run: |
        set -eux
        # Login to OpenShift and select project
        oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        oc project ${{ env.OPENSHIFT_NAMESPACE }}
        # Cancel any rollouts in progress
        oc rollout cancel deployment/${{ env.APP_NAME }}-${{ env.IMAGE_NAME }}-${{ env.APP_ENVIRONMENT }} 2> /dev/null \
            || true && echo "No rollout in progress"

        # Create tag for PROD env from DEV env image
        oc tag \
           ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-${{ env.IMAGE_NAME }}-${{ env.BRANCH }}:${{ inputs.tag }} \
           ${{ env.NAMESPACE }}-prod/${{ env.REPO_NAME }}-${{ env.IMAGE_NAME }}-${{ env.BRANCH }}:${{ inputs.tag }}

        # Process and apply deployment template
        oc process \
           -f tools/openshift/d365api.deployment.yaml \
           -p APP_NAME=${{ env.APP_NAME }} \
           -p REPO_NAME=${{ env.REPO_NAME }} \
           -p BRANCH=${{ env.BRANCH }} \
           -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }} \
           -p TAG=${{ inputs.tag }} \
           -p MIN_REPLICAS=${{ env.MIN_REPLICAS }} \
           -p MAX_REPLICAS=${{ env.MAX_REPLICAS }} \
           -p MIN_CPU=${{ env.MIN_CPU }} \
           -p MAX_CPU=${{ env.MAX_CPU }} \
           -p MIN_MEM=${{ env.MIN_MEM }} \
           -p MAX_MEM=${{ env.MAX_MEM }} \
           -p APP_ENVIRONMENT=${{ env.APP_ENVIRONMENT }} \
            | oc apply -f -

        # Process update-configmap
        cat << JSON > /tmp/authentication_settings
          ${{ secrets.DYNAMICS_AUTHENTICATION_SETTINGS }}
        JSON

        curl -s https://raw.githubusercontent.com/bcgov/${{ env.REPO_NAME }}/${{ env.BRANCH }}/tools/config/update-configmap.sh \
          | bash /dev/stdin \
            ${{ env.APP_ENVIRONMENT }} \
            ${{ env.APP_NAME }} \
            ${{ env.OPENSHIFT_NAMESPACE }} \
            /tmp/authentication_settings

        # Start rollout (if necessary) and follow it
        oc rollout restart deployment/${{ env.APP_NAME }}-${{ env.IMAGE_NAME }}-${{ env.APP_ENVIRONMENT }} 2> /dev/null \
            || true && echo "Rollout in progress"

        # Get status, returns 0 if rollout is successful
        oc rollout status deployment/${{ env.APP_NAME }}-${{ env.IMAGE_NAME }}-${{ env.APP_ENVIRONMENT }}

